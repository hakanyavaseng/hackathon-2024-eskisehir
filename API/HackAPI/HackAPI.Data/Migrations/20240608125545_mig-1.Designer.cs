// <auto-generated />
using System;
using HackAPI.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HackAPI.Data.Migrations
{
    [DbContext(typeof(HackDbContext))]
    [Migration("20240608125545_mig-1")]
    partial class mig1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HackAPI.Entities.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("UnitCarbonFootprint")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("HackAPI.Entities.Entities.ProductProductions", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductionsId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalCarbonFootprint")
                        .HasColumnType("numeric");

                    b.HasKey("ProductId", "ProductionsId");

                    b.HasIndex("ProductionsId");

                    b.ToTable("ProductProductions");
                });

            modelBuilder.Entity("HackAPI.Entities.Entities.Production", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Productions");
                });

            modelBuilder.Entity("HackAPI.Entities.Entities.ProductionTransportation", b =>
                {
                    b.Property<Guid>("ProductionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TransportationId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductionId", "TransportationId");

                    b.HasIndex("TransportationId");

                    b.ToTable("ProductionTransportation");
                });

            modelBuilder.Entity("HackAPI.Entities.Entities.Transportation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Distance")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalCarbonFootprint")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("TransportationDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("Transportations");
                });

            modelBuilder.Entity("HackAPI.Entities.Entities.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("UnitCarbonFootprint")
                        .HasColumnType("numeric");

                    b.Property<string>("VehicleModel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehicleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("HackAPI.Entities.Entities.ProductProductions", b =>
                {
                    b.HasOne("HackAPI.Entities.Entities.Product", "Product")
                        .WithMany("ProductProductions")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HackAPI.Entities.Entities.Production", "Productions")
                        .WithMany("ProductProductions")
                        .HasForeignKey("ProductionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Productions");
                });

            modelBuilder.Entity("HackAPI.Entities.Entities.ProductionTransportation", b =>
                {
                    b.HasOne("HackAPI.Entities.Entities.Production", "Production")
                        .WithMany("ProductionTransportations")
                        .HasForeignKey("ProductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HackAPI.Entities.Entities.Transportation", "Transportation")
                        .WithMany("ProductionTransportations")
                        .HasForeignKey("TransportationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Production");

                    b.Navigation("Transportation");
                });

            modelBuilder.Entity("HackAPI.Entities.Entities.Transportation", b =>
                {
                    b.HasOne("HackAPI.Entities.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("HackAPI.Entities.Entities.Product", b =>
                {
                    b.Navigation("ProductProductions");
                });

            modelBuilder.Entity("HackAPI.Entities.Entities.Production", b =>
                {
                    b.Navigation("ProductProductions");

                    b.Navigation("ProductionTransportations");
                });

            modelBuilder.Entity("HackAPI.Entities.Entities.Transportation", b =>
                {
                    b.Navigation("ProductionTransportations");
                });
#pragma warning restore 612, 618
        }
    }
}
